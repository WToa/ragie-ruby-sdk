name: Generate and Release Ragie Ruby SDK

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  SDK_PATH: local/ragie_ruby_sdk
  REPO_SDK_PATH: ragie_ruby_sdk
  VERSION_FILE: local/ragie_ruby_sdk/lib/ragie_ruby_sdk/version.rb

jobs:
  generate-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate SDK
        id: generate_sdk
        uses: ./.github/actions/generate-sdk
        with:
          repo_sdk_path: ${{ env.REPO_SDK_PATH }}

      - name: Compute SDK hash
        id: hash
        run: |
          # Exclude .travis.yml and README.md files and the version file from the SDK hash
          HASH=$(find "${{ env.SDK_PATH }}" -type f ! -name '.travis.yml' ! -name 'README.md' ! -path "${{ env.VERSION_FILE }}" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "sdk_hash=$HASH" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: check_changes
        run: |
          LAST_HASH=$(cat .last_sdk_hash 2>/dev/null || echo "")
          if [ "$LAST_HASH" = "${{ steps.hash.outputs.sdk_hash }}" ]; then
            echo "No changes detected in SDK. Skipping release."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Update version and hash
        id: update_version
        if: steps.check_changes.outputs.skip != 'true'
        uses: ./.github/actions/update-version
        with:
          sdk_hash: ${{ steps.hash.outputs.sdk_hash }}
          version_file: ${{ env.VERSION_FILE }}
          prev_version: ${{ steps.generate_sdk.outputs.gem_version }}

      - name: Check if version changed
        id: check_version
        if: steps.check_changes.outputs.skip != 'true'
        run: |
          PREV_VERSION="${{ steps.generate_sdk.outputs.gem_version }}"
          NEW_VERSION="${{ steps.update_version.outputs.new_version }}"
          echo "Previous version: $PREV_VERSION"
          echo "Current version: $NEW_VERSION"
          if [ "$NEW_VERSION" = "$PREV_VERSION" ]; then
            echo "Version has not changed. Skipping commit."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Version changed."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Copy generated SDK into repo
        if: steps.check_changes.outputs.skip != 'true' && steps.check_version.outputs.skip != 'true'
        run: |
          rm -rf ${{ env.REPO_SDK_PATH }}
          cp -r ${{ env.SDK_PATH }} ${{ env.REPO_SDK_PATH }}

      - name: Commit generated SDK and hash
        if: steps.check_changes.outputs.skip != 'true' && steps.check_version.outputs.skip != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          VERSION="${{ steps.update_version.outputs.new_version }}"
          git add ragie_ruby_sdk .last_sdk_hash
          git commit -m "Update Ragie Ruby SDK to version $VERSION" || echo "No changes to commit"
          git push

      - name: Set up Ruby
        if: steps.check_changes.outputs.skip != 'true' && steps.check_version.outputs.skip != 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'

      - name: Publish gem
        if: steps.check_changes.outputs.skip != 'true' && steps.check_version.outputs.skip != 'true'
        uses: ./.github/actions/publish-gem
        with:
          repo_sdk_path: ragie_ruby_sdk
          rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}